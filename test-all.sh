#!/bin/bash

# Texas Poker Áªü‰∏ÄÊµãËØïÊâßË°åËÑöÊú¨ v2.4
# Âü∫‰∫éÊñ∞ÁöÑÊµãËØïÁõÆÂΩïÊû∂ÊûÑ: api/game/middleware/realtime/services/shared/legacy
# ÈÅµÂæ™BACKEND_TESTING_GUIDE.mdËßÑËåÉ
set -e

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Êó•ÂøóÁõÆÂΩïÈÖçÁΩÆ
LOG_DIR="test-logs"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
CURRENT_LOG_DIR="$LOG_DIR/$TIMESTAMP"

# ÂàõÂª∫Êó•ÂøóÁõÆÂΩï
setup_logging() {
    mkdir -p "$CURRENT_LOG_DIR"
    log_info "üìÅ Êó•ÂøóÁõÆÂΩïÂ∑≤ÂàõÂª∫: $CURRENT_LOG_DIR"
    
    # ÂàõÂª∫Á¨¶Âè∑ÈìæÊé•ÊåáÂêëÊúÄÊñ∞ÁöÑÊó•Âøó
    if [ -L "$LOG_DIR/latest" ]; then
        rm "$LOG_DIR/latest"
    fi
    ln -sf "$TIMESTAMP" "$LOG_DIR/latest"
}

# Ê∏ÖÁêÜÊóßÊó•ÂøóÔºà‰øùÁïôÊúÄËøë5Ê¨°Ôºâ
cleanup_old_logs() {
    if [ -d "$LOG_DIR" ]; then
        local log_count=$(ls -1 "$LOG_DIR" | grep -E "^[0-9]{8}_[0-9]{6}$" | wc -l)
        if [ "$log_count" -gt 5 ]; then
            log_info "üßπ Ê∏ÖÁêÜÊóßÊó•ÂøóÊñá‰ª∂Ôºà‰øùÁïôÊúÄËøë5Ê¨°Ôºâ..."
            ls -1t "$LOG_DIR" | grep -E "^[0-9]{8}_[0-9]{6}$" | tail -n +6 | while read old_dir; do
                rm -rf "$LOG_DIR/$old_dir"
                log_info "Â∑≤Âà†Èô§ÊóßÊó•Âøó: $old_dir"
            done
        fi
    fi
}

# Êó•ÂøóÂáΩÊï∞
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# ÊµãËØïÁªìÊûúÁªüËÆ°
TESTS_PASSED=0
TESTS_FAILED=0
TEST_SUMMARY=""

# ËØ¶ÁªÜÊ®°ÂùóÊµãËØïÁªüËÆ°ÂèòÈáè
# ÂêéÁ´ØÁªüËÆ°ÂèòÈáè - ÊîπËøõÁâàÔºöÂå∫ÂàÜ‰∏âÁßçÊñá‰ª∂Áä∂ÊÄÅ
# Ê∏∏ÊàèÂºïÊìéÊµãËØï
BACKEND_GAME_FILES=0
BACKEND_GAME_FILES_PASSED=0         # Êñá‰ª∂‰∏≠ÊâÄÊúâÊµãËØïÈÉΩÈÄöËøá
BACKEND_GAME_FILES_FAILED=0         # Êñá‰ª∂‰∏≠ÊúâÊµãËØïÂ§±Ë¥•Ôºà‰ΩÜËÉΩËøêË°åÔºâ
BACKEND_GAME_FILES_ERROR=0          # Êñá‰ª∂Êó†Ê≥ïËøêË°åÔºàÁºñËØëÈîôËØØÁ≠âÔºâ
BACKEND_GAME_TESTS=0
BACKEND_GAME_TESTS_PASSED=0
BACKEND_GAME_TESTS_FAILED=0
BACKEND_GAME_TESTS_SKIPPED=0

# APIÊé•Âè£ÊµãËØï
BACKEND_API_FILES=0
BACKEND_API_FILES_PASSED=0
BACKEND_API_FILES_FAILED=0
BACKEND_API_FILES_ERROR=0
BACKEND_API_TESTS=0
BACKEND_API_TESTS_PASSED=0
BACKEND_API_TESTS_FAILED=0
BACKEND_API_TESTS_SKIPPED=0

# ÂÆûÊó∂ÈÄö‰ø°ÊµãËØï
BACKEND_REALTIME_FILES=0
BACKEND_REALTIME_FILES_PASSED=0
BACKEND_REALTIME_FILES_FAILED=0
BACKEND_REALTIME_FILES_ERROR=0
BACKEND_REALTIME_TESTS=0
BACKEND_REALTIME_TESTS_PASSED=0
BACKEND_REALTIME_TESTS_FAILED=0
BACKEND_REALTIME_TESTS_SKIPPED=0

# ‰∏≠Èó¥‰ª∂ÊµãËØï
BACKEND_MIDDLEWARE_FILES=0
BACKEND_MIDDLEWARE_FILES_PASSED=0
BACKEND_MIDDLEWARE_FILES_FAILED=0
BACKEND_MIDDLEWARE_FILES_ERROR=0
BACKEND_MIDDLEWARE_TESTS=0
BACKEND_MIDDLEWARE_TESTS_PASSED=0
BACKEND_MIDDLEWARE_TESTS_FAILED=0
BACKEND_MIDDLEWARE_TESTS_SKIPPED=0

# ÊúçÂä°Â±ÇÊµãËØï
BACKEND_SERVICES_FILES=0
BACKEND_SERVICES_FILES_PASSED=0
BACKEND_SERVICES_FILES_FAILED=0
BACKEND_SERVICES_FILES_ERROR=0
BACKEND_SERVICES_TESTS=0
BACKEND_SERVICES_TESTS_PASSED=0
BACKEND_SERVICES_TESTS_FAILED=0
BACKEND_SERVICES_TESTS_SKIPPED=0

# ÂêéÁ´ØÊÄªËÆ°
BACKEND_TOTAL_FILES=0
BACKEND_TOTAL_FILES_PASSED=0
BACKEND_TOTAL_FILES_FAILED=0
BACKEND_TOTAL_FILES_ERROR=0
BACKEND_TOTAL_TESTS=0
BACKEND_TOTAL_PASSED=0
BACKEND_TOTAL_FAILED=0
BACKEND_TOTAL_SKIPPED=0

# ÂâçÁ´ØÁªüËÆ°ÂèòÈáè
FRONTEND_COMPONENTS_FILES=0
FRONTEND_COMPONENTS_TESTS=0
FRONTEND_COMPONENTS_TESTS_PASSED=0
FRONTEND_COMPONENTS_TESTS_FAILED=0
FRONTEND_COMPONENTS_PASSED=0
FRONTEND_COMPONENTS_FAILED=0
FRONTEND_PAGES_FILES=0
FRONTEND_PAGES_TESTS=0
FRONTEND_PAGES_TESTS_PASSED=0
FRONTEND_PAGES_TESTS_FAILED=0
FRONTEND_PAGES_PASSED=0
FRONTEND_PAGES_FAILED=0
FRONTEND_HOOKS_FILES=0
FRONTEND_HOOKS_TESTS=0
FRONTEND_HOOKS_TESTS_PASSED=0
FRONTEND_HOOKS_TESTS_FAILED=0
FRONTEND_HOOKS_PASSED=0
FRONTEND_HOOKS_FAILED=0
FRONTEND_SERVICES_FILES=0
FRONTEND_SERVICES_TESTS=0
FRONTEND_SERVICES_TESTS_PASSED=0
FRONTEND_SERVICES_TESTS_FAILED=0
FRONTEND_SERVICES_PASSED=0
FRONTEND_SERVICES_FAILED=0
FRONTEND_TOTAL_FILES=0
FRONTEND_TOTAL_TESTS=0
FRONTEND_TOTAL_PASSED=0
FRONTEND_TOTAL_FAILED=0

# E2EÁªüËÆ°ÂèòÈáè
E2E_FILES=0
E2E_TESTS=0

# ÂÆâÂÖ®Ëé∑ÂèñÊï∞Â≠óÁöÑËæÖÂä©ÂáΩÊï∞
safe_number() {
    local value="$1"
    # ÁßªÈô§Á©∫ÁôΩÂ≠óÁ¨¶Âπ∂Ê£ÄÊü•ÊòØÂê¶‰∏∫Êï∞Â≠ó
    value=$(echo "$value" | tr -d '\n\r\t ' | head -1)
    if [[ "$value" =~ ^[0-9]+$ ]]; then
        echo "$value"
    else
        echo "0"
    fi
}

# Ê£ÄÊµãÊó†Ê≥ïËøêË°åÁöÑÊµãËØïÊñá‰ª∂ÔºàÁºñËØëÈîôËØØÁ≠âÔºâ
count_compilation_errors() {
    local log_file="$1"
    local error_count=0
    
    # Ê£ÄÊµãÂêÑÁßçÊó†Ê≥ïËøêË°åÁöÑÊ®°Âºè
    if [ -f "$log_file" ]; then
        # ‰∏ªË¶ÅÊ®°ÂºèÔºöTest suite failed to run
        local suite_failed=$(safe_number "$(grep -c "Test suite failed to run" "$log_file" 2>/dev/null || echo "0")")
        error_count=$((error_count + suite_failed))
        
        # ÂÖ∂‰ªñÁºñËØëÈîôËØØÊ®°Âºè
        local module_errors=$(safe_number "$(grep -c "Cannot find module" "$log_file" 2>/dev/null || echo "0")")
        local syntax_errors=$(safe_number "$(grep -c "SyntaxError" "$log_file" 2>/dev/null || echo "0")")
        local import_errors=$(safe_number "$(grep -c "TypeError.*import" "$log_file" 2>/dev/null || echo "0")")
        local export_errors=$(safe_number "$(grep -c "has no default export" "$log_file" 2>/dev/null || echo "0")")
        
        # Â¶ÇÊûúÊúâÂÖ∂‰ªñÈîôËØØ‰ΩÜÊ≤°Êúâsuite failedÔºåËØ¥ÊòéÂèØËÉΩÊòØÂÖ∂‰ªñÁ±ªÂûãÁöÑÁºñËØëÈîôËØØ
        local other_errors=$((module_errors + syntax_errors + import_errors + export_errors))
        if [ $other_errors -gt 0 ] && [ $suite_failed -eq 0 ]; then
            # Ê£ÄÊü•Ëøô‰∫õÈîôËØØÊòØÂê¶ÂØºËá¥‰∫ÜFAIL‰ΩÜÊ≤°ÊúâÊµãËØïÁî®‰æãÁªüËÆ°
            local fail_files=$(safe_number "$(grep -c "^FAIL " "$log_file" 2>/dev/null || echo "0")")
            local test_stats=$(safe_number "$(grep -c "Tests:" "$log_file" 2>/dev/null || echo "0")")
            
            # Â¶ÇÊûúÊúâFAILÊñá‰ª∂‰ΩÜÊ≤°ÊúâÊµãËØïÁªüËÆ°ÔºåÂèØËÉΩÊòØÁºñËØëÈîôËØØ
            if [ $fail_files -gt 0 ] && [ $test_stats -eq 0 ]; then
                error_count=$fail_files
            fi
        fi
    fi
    
    echo $error_count
}

# Ëß£ÊûêÊñá‰ª∂Áä∂ÊÄÅÔºàÊîπËøõÁâàÔºöÂå∫ÂàÜ‰∏âÁßçÁä∂ÊÄÅÔºâ
parse_file_status() {
    local log_file="$1"
    
    if [ ! -f "$log_file" ]; then
        echo "0 0 0 0"
        return
    fi
    
    # ÁªüËÆ°ÂêÑÁßçÁä∂ÊÄÅ
    local files_all_passed=$(safe_number "$(grep -c "^PASS " "$log_file" 2>/dev/null || echo "0")")
    local total_failed=$(safe_number "$(grep -c "^FAIL " "$log_file" 2>/dev/null || echo "0")")
    local files_cannot_run=$(count_compilation_errors "$log_file")
    
    local files_some_failed=$((total_failed - files_cannot_run))
    local total_files=$((files_all_passed + files_some_failed + files_cannot_run))
    
    echo "$total_files $files_all_passed $files_some_failed $files_cannot_run"
}

# Ëß£ÊûêJestÊµãËØïÁªìÊûúÔºàÂêéÁ´ØÔºâ- ÊîπËøõÁâà
parse_jest_results() {
    local log_file="$1"
    local module_type="$2"
    
    if [ ! -f "$log_file" ]; then
        return
    fi
    
    # ‰ΩøÁî®Êñ∞ÁöÑÊñá‰ª∂Áä∂ÊÄÅËß£Êûê
    local file_status=$(parse_file_status "$log_file")
    local total_files=$(echo $file_status | cut -d' ' -f1)
    local files_all_passed=$(echo $file_status | cut -d' ' -f2)
    local files_some_failed=$(echo $file_status | cut -d' ' -f3)
    local files_cannot_run=$(echo $file_status | cut -d' ' -f4)
    
    # Ëß£ÊûêÊµãËØïÁî®‰æãÁªüËÆ°
    local tests_line=$(grep "Tests:" "$log_file" | tail -1)
    
    if [ -n "$tests_line" ]; then
        # ÊèêÂèñÊµãËØïÁªüËÆ°: "Tests: 1 skipped, 25 passed, 26 total"
        local total_tests=$(safe_number "$(echo "$tests_line" | grep -o '[0-9]\+ total' | grep -o '[0-9]\+')")
        local passed_tests=$(safe_number "$(echo "$tests_line" | grep -o '[0-9]\+ passed' | grep -o '[0-9]\+')")
        local failed_tests=$(safe_number "$(echo "$tests_line" | grep -o '[0-9]\+ failed' | grep -o '[0-9]\+')")
        local skipped_tests=$(safe_number "$(echo "$tests_line" | grep -o '[0-9]\+ skipped' | grep -o '[0-9]\+')")
        
        case "$module_type" in
            "game")
                BACKEND_GAME_FILES=$total_files
                BACKEND_GAME_FILES_PASSED=$files_all_passed
                BACKEND_GAME_FILES_FAILED=$files_some_failed
                BACKEND_GAME_FILES_ERROR=$files_cannot_run
                BACKEND_GAME_TESTS=$total_tests
                BACKEND_GAME_TESTS_PASSED=$passed_tests
                BACKEND_GAME_TESTS_FAILED=$failed_tests
                BACKEND_GAME_TESTS_SKIPPED=$skipped_tests
                ;;
            "api")
                BACKEND_API_FILES=$total_files
                BACKEND_API_FILES_PASSED=$files_all_passed
                BACKEND_API_FILES_FAILED=$files_some_failed
                BACKEND_API_FILES_ERROR=$files_cannot_run
                BACKEND_API_TESTS=$total_tests
                BACKEND_API_TESTS_PASSED=$passed_tests
                BACKEND_API_TESTS_FAILED=$failed_tests
                BACKEND_API_TESTS_SKIPPED=$skipped_tests
                ;;
            "realtime")
                BACKEND_REALTIME_FILES=$total_files
                BACKEND_REALTIME_FILES_PASSED=$files_all_passed
                BACKEND_REALTIME_FILES_FAILED=$files_some_failed
                BACKEND_REALTIME_FILES_ERROR=$files_cannot_run
                BACKEND_REALTIME_TESTS=$total_tests
                BACKEND_REALTIME_TESTS_PASSED=$passed_tests
                BACKEND_REALTIME_TESTS_FAILED=$failed_tests
                BACKEND_REALTIME_TESTS_SKIPPED=$skipped_tests
                ;;
            "middleware")
                BACKEND_MIDDLEWARE_FILES=$total_files
                BACKEND_MIDDLEWARE_FILES_PASSED=$files_all_passed
                BACKEND_MIDDLEWARE_FILES_FAILED=$files_some_failed
                BACKEND_MIDDLEWARE_FILES_ERROR=$files_cannot_run
                BACKEND_MIDDLEWARE_TESTS=$total_tests
                BACKEND_MIDDLEWARE_TESTS_PASSED=$passed_tests
                BACKEND_MIDDLEWARE_TESTS_FAILED=$failed_tests
                BACKEND_MIDDLEWARE_TESTS_SKIPPED=$skipped_tests
                ;;
            "services")
                BACKEND_SERVICES_FILES=$total_files
                BACKEND_SERVICES_FILES_PASSED=$files_all_passed
                BACKEND_SERVICES_FILES_FAILED=$files_some_failed
                BACKEND_SERVICES_FILES_ERROR=$files_cannot_run
                BACKEND_SERVICES_TESTS=$total_tests
                BACKEND_SERVICES_TESTS_PASSED=$passed_tests
                BACKEND_SERVICES_TESTS_FAILED=$failed_tests
                BACKEND_SERVICES_TESTS_SKIPPED=$skipped_tests
                ;;
        esac
    fi
}

# Ëß£ÊûêVitestÊµãËØïÁªìÊûúÔºàÂâçÁ´ØÔºâ
parse_vitest_results() {
    local log_file="$1"
    local module_type="$2"
    
    if [ ! -f "$log_file" ]; then
        return
    fi
    
    # Ëß£ÊûêÊÄª‰ΩìÁªüËÆ°
    local test_files_line=$(grep "Test Files" "$log_file" | tail -1)
    local tests_line=$(grep "Tests" "$log_file" | tail -1)
    
    if [ -n "$test_files_line" ]; then
        # ÊèêÂèñÊñá‰ª∂ÁªüËÆ°: "Test Files  4 failed | 13 passed (17)"
        local total_files=$(echo "$test_files_line" | grep -o '([0-9]\+)' | grep -o '[0-9]\+')
        local passed_files=$(echo "$test_files_line" | grep -o '[0-9]\+ passed' | grep -o '[0-9]\+')
        local failed_files=$(echo "$test_files_line" | grep -o '[0-9]\+ failed' | grep -o '[0-9]\+')
        
        case "$module_type" in
            "frontend_components")
                FRONTEND_COMPONENTS_FILES=${total_files:-0}
                FRONTEND_COMPONENTS_PASSED=${passed_files:-0}
                FRONTEND_COMPONENTS_FAILED=${failed_files:-0}
                ;;
            "frontend_pages")
                FRONTEND_PAGES_FILES=${total_files:-0}
                FRONTEND_PAGES_PASSED=${passed_files:-0}
                FRONTEND_PAGES_FAILED=${failed_files:-0}
                ;;
            "frontend_hooks")
                FRONTEND_HOOKS_FILES=${total_files:-0}
                FRONTEND_HOOKS_PASSED=${passed_files:-0}
                FRONTEND_HOOKS_FAILED=${failed_files:-0}
                ;;
            "frontend_services")
                FRONTEND_SERVICES_FILES=${total_files:-0}
                FRONTEND_SERVICES_PASSED=${passed_files:-0}
                FRONTEND_SERVICES_FAILED=${failed_files:-0}
                ;;
            "frontend_total")
                FRONTEND_TOTAL_FILES=${total_files:-0}
                ;;
        esac
    fi
    
    if [ -n "$tests_line" ]; then
        # ÊèêÂèñÊµãËØïÁªüËÆ°: "Tests  34 failed | 302 passed (336)"
        local total_tests=$(echo "$tests_line" | grep -o '([0-9]\+)' | grep -o '[0-9]\+')
        local passed_tests=$(echo "$tests_line" | grep -o '[0-9]\+ passed' | grep -o '[0-9]\+')
        local failed_tests=$(echo "$tests_line" | grep -o '[0-9]\+ failed' | grep -o '[0-9]\+')
        
        case "$module_type" in
            "frontend_components")
                FRONTEND_COMPONENTS_TESTS=${total_tests:-0}
                FRONTEND_COMPONENTS_TESTS_PASSED=${passed_tests:-0}
                FRONTEND_COMPONENTS_TESTS_FAILED=${failed_tests:-0}
                ;;
            "frontend_pages")
                FRONTEND_PAGES_TESTS=${total_tests:-0}
                FRONTEND_PAGES_TESTS_PASSED=${passed_tests:-0}
                FRONTEND_PAGES_TESTS_FAILED=${failed_tests:-0}
                ;;
            "frontend_hooks")
                FRONTEND_HOOKS_TESTS=${total_tests:-0}
                FRONTEND_HOOKS_TESTS_PASSED=${passed_tests:-0}
                FRONTEND_HOOKS_TESTS_FAILED=${failed_tests:-0}
                ;;
            "frontend_services")
                FRONTEND_SERVICES_TESTS=${total_tests:-0}
                FRONTEND_SERVICES_TESTS_PASSED=${passed_tests:-0}
                FRONTEND_SERVICES_TESTS_FAILED=${failed_tests:-0}
                ;;
            "frontend_total")
                FRONTEND_TOTAL_TESTS=${total_tests:-0}
                FRONTEND_TOTAL_PASSED=${passed_tests:-0}
                FRONTEND_TOTAL_FAILED=${failed_tests:-0}
                ;;
        esac
    fi
}

# ËÆ∞ÂΩïÊµãËØïÁªìÊûú
record_test_result() {
    local test_name="$1"
    local result="$2"
    local log_file="$3"
    
    if [ "$result" = "pass" ]; then
        TESTS_PASSED=$((TESTS_PASSED + 1))
        TEST_SUMMARY="${TEST_SUMMARY}‚úÖ ${test_name}\n"
        log_success "$test_name - ÈÄöËøá"
    else
        TESTS_FAILED=$((TESTS_FAILED + 1))
        TEST_SUMMARY="${TEST_SUMMARY}‚ùå ${test_name}\n"
        log_error "$test_name - Â§±Ë¥•"
        if [ -n "$log_file" ]; then
            log_warning "Êó•ÂøóÊñá‰ª∂: $log_file"
        fi
    fi
}

# Ê£ÄÊü•ÁéØÂ¢ÉÊòØÂê¶Â∞±Áª™
check_environment() {
    log_info "üîç Ê£ÄÊü•ÊµãËØïÁéØÂ¢É..."
    
    # Ê£ÄÊü•ÂêéÁ´ØÊúçÂä°
    if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
        log_success "ÂêéÁ´ØÊúçÂä°ËøêË°åÊ≠£Â∏∏"
    else
        log_warning "ÂêéÁ´ØÊúçÂä°Êú™ËøêË°åÔºåÂ∞ùËØïÂêØÂä®..."
        ./dev-local.sh start
        sleep 10
        
        if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
            log_success "ÂêéÁ´ØÊúçÂä°ÂêØÂä®ÊàêÂäü"
        else
            log_error "ÂêéÁ´ØÊúçÂä°ÂêØÂä®Â§±Ë¥•ÔºåËØ∑ÊâãÂä®Ê£ÄÊü•"
            exit 1
        fi
    fi
    
    # Ê£ÄÊü•ÂâçÁ´ØÊúçÂä°
    if curl -f http://localhost:5173 > /dev/null 2>&1; then
        log_success "ÂâçÁ´ØÊúçÂä°ËøêË°åÊ≠£Â∏∏"
    else
        log_warning "ÂâçÁ´ØÊúçÂä°Áä∂ÊÄÅÂºÇÂ∏∏Ôºå‰ΩÜÂèØ‰ª•ÁªßÁª≠ÊµãËØï"
    fi
    
    # Ê£ÄÊü•Êï∞ÊçÆÂ∫ì
    if docker ps | grep -q "texas_poker_postgres"; then
        log_success "PostgreSQL ËøêË°åÊ≠£Â∏∏"
    else
        log_error "PostgreSQL Êú™ËøêË°åÔºåËØ∑ÂêØÂä®Êï∞ÊçÆÂ∫ìÊúçÂä°"
        exit 1
    fi
}

# ËøêË°åÂêéÁ´ØÊµãËØï
run_backend_tests() {
    log_info "üîß ËøêË°åÂêéÁ´ØÊµãËØï..."
    echo "========================================"
    
    cd backend
    
    # ËøêË°åÊâÄÊúâÂêéÁ´ØÊµãËØï (Âü∫‰∫éÊñ∞ÁöÑ__tests__ÁõÆÂΩïÁªìÊûÑ, ÊéíÈô§legacyÁõÆÂΩï)
    log_info "ÊâßË°åÊâÄÊúâÂêéÁ´ØÊµãËØïÂ•ó‰ª∂..."
    local backend_all_log="$CURRENT_LOG_DIR/backend_all_tests.log"
    if npm test -- --testPathIgnorePatterns="__tests__/legacy" > "../$backend_all_log" 2>&1; then
        record_test_result "Backend All Tests" "pass"
    else
        record_test_result "Backend All Tests" "fail" "$backend_all_log"
    fi
    # Ëß£ÊûêÊÄª‰ΩìÊµãËØïÁªìÊûú
    parse_jest_results "../$backend_all_log" "backend_total"
    
    # ÊåâÂäüËÉΩÂüüËøêË°åÊµãËØï
    log_info "Ê£ÄÊü•Ê∏∏ÊàèÂºïÊìéÊµãËØï..."
    local backend_game_log="$CURRENT_LOG_DIR/backend_game_tests.log"
    if npm test -- --testPathPattern="__tests__/game" > "../$backend_game_log" 2>&1; then
        record_test_result "Backend Game Tests" "pass"
    else
        record_test_result "Backend Game Tests" "fail" "$backend_game_log"
    fi
    # Ëß£ÊûêÊ∏∏ÊàèÊµãËØïÁªìÊûúÔºàÂ§çÁî®unitÁªìÊûÑÔºâ
    parse_jest_results "../$backend_game_log" "game"
    
    # ËøêË°åAPIÊé•Âè£ÊµãËØï
    log_info "Ê£ÄÊü•APIÊé•Âè£ÊµãËØï..."
    local backend_api_log="$CURRENT_LOG_DIR/backend_api_tests.log"
    if npm test -- --testPathPattern="__tests__/api" > "../$backend_api_log" 2>&1; then
        record_test_result "Backend API Tests" "pass"
    else
        record_test_result "Backend API Tests" "fail" "$backend_api_log"
    fi
    # Ëß£ÊûêAPIÊµãËØïÁªìÊûúÔºàÂ§çÁî®integrationÁªìÊûÑÔºâ
    parse_jest_results "../$backend_api_log" "api"
    
    # ËøêË°åÂÆûÊó∂ÈÄö‰ø°ÊµãËØï
    log_info "Ê£ÄÊü•ÂÆûÊó∂ÈÄö‰ø°ÊµãËØï..."
    local backend_realtime_log="$CURRENT_LOG_DIR/backend_realtime_tests.log"
    if npm test -- --testPathPattern="__tests__/realtime" > "../$backend_realtime_log" 2>&1; then
        record_test_result "Backend Realtime Tests" "pass"
    else
        record_test_result "Backend Realtime Tests" "fail" "$backend_realtime_log"
    fi
    # Ëß£ÊûêÂÆûÊó∂ÈÄö‰ø°ÊµãËØïÁªìÊûú
    parse_jest_results "../$backend_realtime_log" "realtime"
    
    # ËøêË°å‰∏≠Èó¥‰ª∂ÊµãËØï
    log_info "Ê£ÄÊü•‰∏≠Èó¥‰ª∂ÊµãËØï..."
    local backend_middleware_log="$CURRENT_LOG_DIR/backend_middleware_tests.log"
    if npm test -- --testPathPattern="__tests__/middleware" > "../$backend_middleware_log" 2>&1; then
        record_test_result "Backend Middleware Tests" "pass"
    else
        record_test_result "Backend Middleware Tests" "fail" "$backend_middleware_log"
    fi
    # Ëß£Êûê‰∏≠Èó¥‰ª∂ÊµãËØïÁªìÊûú
    parse_jest_results "../$backend_middleware_log" "middleware"
    
    # ËøêË°åÊúçÂä°Â±ÇÊµãËØï
    log_info "Ê£ÄÊü•ÊúçÂä°Â±ÇÊµãËØï..."
    local backend_services_log="$CURRENT_LOG_DIR/backend_services_tests.log"
    if npm test -- --testPathPattern="__tests__/services" > "../$backend_services_log" 2>&1; then
        record_test_result "Backend Services Tests" "pass"
    else
        record_test_result "Backend Services Tests" "fail" "$backend_services_log"
    fi
    # Ëß£ÊûêÊúçÂä°Â±ÇÊµãËØïÁªìÊûú
    parse_jest_results "../$backend_services_log" "services"
    
    # ËÆ°ÁÆóÂêéÁ´ØÊÄªËÆ°ÁªüËÆ°
    BACKEND_TOTAL_FILES=$((BACKEND_GAME_FILES + BACKEND_API_FILES + BACKEND_REALTIME_FILES + BACKEND_MIDDLEWARE_FILES + BACKEND_SERVICES_FILES))
    BACKEND_TOTAL_FILES_PASSED=$((BACKEND_GAME_FILES_PASSED + BACKEND_API_FILES_PASSED + BACKEND_REALTIME_FILES_PASSED + BACKEND_MIDDLEWARE_FILES_PASSED + BACKEND_SERVICES_FILES_PASSED))
    BACKEND_TOTAL_FILES_FAILED=$((BACKEND_GAME_FILES_FAILED + BACKEND_API_FILES_FAILED + BACKEND_REALTIME_FILES_FAILED + BACKEND_MIDDLEWARE_FILES_FAILED + BACKEND_SERVICES_FILES_FAILED))
    BACKEND_TOTAL_FILES_ERROR=$((BACKEND_GAME_FILES_ERROR + BACKEND_API_FILES_ERROR + BACKEND_REALTIME_FILES_ERROR + BACKEND_MIDDLEWARE_FILES_ERROR + BACKEND_SERVICES_FILES_ERROR))
    BACKEND_TOTAL_TESTS=$((BACKEND_GAME_TESTS + BACKEND_API_TESTS + BACKEND_REALTIME_TESTS + BACKEND_MIDDLEWARE_TESTS + BACKEND_SERVICES_TESTS))
    BACKEND_TOTAL_PASSED=$((BACKEND_GAME_TESTS_PASSED + BACKEND_API_TESTS_PASSED + BACKEND_REALTIME_TESTS_PASSED + BACKEND_MIDDLEWARE_TESTS_PASSED + BACKEND_SERVICES_TESTS_PASSED))
    BACKEND_TOTAL_FAILED=$((BACKEND_GAME_TESTS_FAILED + BACKEND_API_TESTS_FAILED + BACKEND_REALTIME_TESTS_FAILED + BACKEND_MIDDLEWARE_TESTS_FAILED + BACKEND_SERVICES_TESTS_FAILED))
    BACKEND_TOTAL_SKIPPED=$((BACKEND_GAME_TESTS_SKIPPED + BACKEND_API_TESTS_SKIPPED + BACKEND_REALTIME_TESTS_SKIPPED + BACKEND_MIDDLEWARE_TESTS_SKIPPED + BACKEND_SERVICES_TESTS_SKIPPED))
    
    # ËøêË°åÊµãËØïË¶ÜÁõñÁéá
    log_info "ÁîüÊàêÊµãËØïË¶ÜÁõñÁéáÊä•Âëä..."
    local backend_coverage_log="$CURRENT_LOG_DIR/backend_coverage.log"
    if npm run test:coverage > "../$backend_coverage_log" 2>&1; then
        record_test_result "Backend Coverage Report" "pass"
    else
        record_test_result "Backend Coverage Report" "fail" "$backend_coverage_log"
    fi
    
    cd ..
}

# ËøêË°åÂâçÁ´ØÊµãËØï
run_frontend_tests() {
    log_info "üé® ËøêË°åÂâçÁ´ØÊµãËØï..."
    echo "========================================"
    
    cd frontend
    
    # ÂàÜÁ±ªÊµãËØïÊâßË°å (Êó†ÈúÄËøêË°åÊï¥‰ΩìÊµãËØïÔºåÈÄöËøáÊ®°ÂùóÊµãËØïÂä†ÊÄªÂæóÂà∞ÁªüËÆ°)
    log_info "ÊâßË°åÁªÑ‰ª∂ÊµãËØï..."
    local frontend_components_log="$CURRENT_LOG_DIR/frontend_components.log"
    if npm test -- __tests__/components --run > "../$frontend_components_log" 2>&1; then
        record_test_result "Frontend Component Tests" "pass"
    else
        record_test_result "Frontend Component Tests" "fail" "$frontend_components_log"
    fi
    # Ëß£ÊûêÁªÑ‰ª∂ÊµãËØïÁªìÊûú
    parse_vitest_results "../$frontend_components_log" "frontend_components"
    
    log_info "ÊâßË°åÈ°µÈù¢ÊµãËØï..."
    local frontend_pages_log="$CURRENT_LOG_DIR/frontend_pages.log"
    if npm test -- __tests__/pages --run > "../$frontend_pages_log" 2>&1; then
        record_test_result "Frontend Page Tests" "pass"
    else
        record_test_result "Frontend Page Tests" "fail" "$frontend_pages_log"
    fi
    # Ëß£ÊûêÈ°µÈù¢ÊµãËØïÁªìÊûú
    parse_vitest_results "../$frontend_pages_log" "frontend_pages"
    
    log_info "ÊâßË°åHookÊµãËØï..."
    local frontend_hooks_log="$CURRENT_LOG_DIR/frontend_hooks.log"
    if npm test -- __tests__/hooks --run > "../$frontend_hooks_log" 2>&1; then
        record_test_result "Frontend Hook Tests" "pass"
    else
        record_test_result "Frontend Hook Tests" "fail" "$frontend_hooks_log"
    fi
    # Ëß£ÊûêHookÊµãËØïÁªìÊûú
    parse_vitest_results "../$frontend_hooks_log" "frontend_hooks"
    
    log_info "ÊâßË°åÊúçÂä°ÊµãËØï..."
    local frontend_services_log="$CURRENT_LOG_DIR/frontend_services.log"
    if npm test -- __tests__/services --run > "../$frontend_services_log" 2>&1; then
        record_test_result "Frontend Service Tests" "pass"
    else
        record_test_result "Frontend Service Tests" "fail" "$frontend_services_log"
    fi
    # Ëß£ÊûêÊúçÂä°ÊµãËØïÁªìÊûú
    parse_vitest_results "../$frontend_services_log" "frontend_services"
    
    # ËÆ°ÁÆóÂâçÁ´ØÊÄª‰ΩìÁªüËÆ°Êï∞ÊçÆÔºàÈÄöËøáÂêÑÊ®°ÂùóÂä†ÊÄªÔºâ
    log_info "ËÆ°ÁÆóÂâçÁ´ØÊÄª‰ΩìÁªüËÆ°Êï∞ÊçÆ..."
    FRONTEND_TOTAL_FILES=$((FRONTEND_COMPONENTS_FILES + FRONTEND_PAGES_FILES + FRONTEND_HOOKS_FILES + FRONTEND_SERVICES_FILES))
    FRONTEND_TOTAL_TESTS=$((FRONTEND_COMPONENTS_TESTS + FRONTEND_PAGES_TESTS + FRONTEND_HOOKS_TESTS + FRONTEND_SERVICES_TESTS))
    FRONTEND_TOTAL_PASSED=$((FRONTEND_COMPONENTS_TESTS_PASSED + FRONTEND_PAGES_TESTS_PASSED + FRONTEND_HOOKS_TESTS_PASSED + FRONTEND_SERVICES_TESTS_PASSED))
    FRONTEND_TOTAL_FAILED=$((FRONTEND_COMPONENTS_TESTS_FAILED + FRONTEND_PAGES_TESTS_FAILED + FRONTEND_HOOKS_TESTS_FAILED + FRONTEND_SERVICES_TESTS_FAILED))
    
    log_info "ÂâçÁ´ØÊÄª‰ΩìÁªüËÆ°: Êñá‰ª∂ $FRONTEND_TOTAL_FILES, ÊµãËØï $FRONTEND_TOTAL_TESTS (ÈÄöËøá: $FRONTEND_TOTAL_PASSED, Â§±Ë¥•: $FRONTEND_TOTAL_FAILED)"
    
    # ËøêË°åÊµãËØïË¶ÜÁõñÁéáÔºàÂ¶ÇÊûúÈÖçÁΩÆ‰∫ÜÁöÑËØùÔºâ
    log_info "ÁîüÊàêÂâçÁ´ØÊµãËØïË¶ÜÁõñÁéáÊä•Âëä..."
    local frontend_coverage_log="$CURRENT_LOG_DIR/frontend_coverage.log"
    if npm run test:coverage 2>/dev/null || npm run test:run --coverage > "../$frontend_coverage_log" 2>&1; then
        record_test_result "Frontend Coverage Report" "pass"
    else
        record_test_result "Frontend Coverage Report" "fail" "$frontend_coverage_log"
    fi
    
    cd ..
}

# ËøêË°åE2EÊµãËØï
run_e2e_tests() {
    log_info "üé≠ ËøêË°åÁ´ØÂà∞Á´ØÊµãËØï..."
    echo "========================================"
    
    if [ -d "e2e-tests" ]; then
        cd e2e-tests
        
        # Á°Æ‰øùPlaywrightÊµèËßàÂô®Â∑≤ÂÆâË£Ö
        if ! npx playwright --version > /dev/null 2>&1; then
            log_info "ÂÆâË£ÖPlaywrightÊµèËßàÂô®..."
            npm run install
        fi
        
        # ËøêË°åE2EÊµãËØï
        local e2e_log="$CURRENT_LOG_DIR/e2e_tests.log"
        if npm test > "../$e2e_log" 2>&1; then
            record_test_result "E2E Tests" "pass"
        else
            record_test_result "E2E Tests" "fail" "$e2e_log"
        fi
        
        cd ..
    else
        log_warning "E2EÊµãËØïÁõÆÂΩï‰∏çÂ≠òÂú®ÔºåË∑≥ËøáE2EÊµãËØï"
    fi
}

# ËøêË°åÊûÑÂª∫ÊµãËØï
run_build_tests() {
    log_info "üèóÔ∏è  ËøêË°åÊûÑÂª∫ÊµãËØï..."
    echo "========================================"
    
    # ÂêéÁ´ØÊûÑÂª∫ÊµãËØï
    cd backend
    local backend_build_log="$CURRENT_LOG_DIR/backend_build.log"
    if npm run build > "../$backend_build_log" 2>&1; then
        record_test_result "Backend Build" "pass"
    else
        record_test_result "Backend Build" "fail" "$backend_build_log"
    fi
    cd ..
    
    # ÂâçÁ´ØÊûÑÂª∫ÊµãËØï
    cd frontend
    local frontend_build_log="$CURRENT_LOG_DIR/frontend_build.log"
    if npm run build > "../$frontend_build_log" 2>&1; then
        record_test_result "Frontend Build" "pass"
    else
        record_test_result "Frontend Build" "fail" "$frontend_build_log"
    fi
    cd ..
}

# ÁîüÊàêËØ¶ÁªÜÊ®°ÂùóÁªüËÆ°Êä•Âëä
generate_detailed_stats() {
    echo -e "${BLUE}üìä ËØ¶ÁªÜÊ®°ÂùóÊµãËØïÁªüËÆ°${NC}"
    echo "========================================"
    
    # ÂêéÁ´ØÁªüËÆ°
    echo -e "${YELLOW}üîß ÂêéÁ´ØÊµãËØïÁªüËÆ°${NC}"
    echo "----------------------------------------"
    if [ "$BACKEND_TOTAL_FILES" -gt 0 ]; then
        echo "ÊÄª‰ΩìÁªüËÆ°:"
        echo "  üìÅ ÊµãËØïÊñá‰ª∂: $BACKEND_TOTAL_FILES"
        echo "  üß™ ÊµãËØïÁî®‰æã: $BACKEND_TOTAL_TESTS (ÈÄöËøá: $BACKEND_TOTAL_PASSED, Â§±Ë¥•: $BACKEND_TOTAL_FAILED, Ë∑≥Ëøá: $BACKEND_TOTAL_SKIPPED)"
    fi
    
    if [ "$BACKEND_GAME_FILES" -gt 0 ]; then
        echo "Ê∏∏ÊàèÂºïÊìéÊµãËØï:"
        echo "  üìÅ ÊµãËØïÊñá‰ª∂: $BACKEND_GAME_FILES (üü¢ÈÄöËøá: $BACKEND_GAME_FILES_PASSED, üü°Â§±Ë¥•: $BACKEND_GAME_FILES_FAILED, üî¥Êó†Ê≥ïËøêË°å: $BACKEND_GAME_FILES_ERROR)"
        echo "  üß™ ÊµãËØïÁî®‰æã: $BACKEND_GAME_TESTS (ÈÄöËøá: $BACKEND_GAME_TESTS_PASSED, Â§±Ë¥•: $BACKEND_GAME_TESTS_FAILED, Ë∑≥Ëøá: $BACKEND_GAME_TESTS_SKIPPED)"
    fi
    
    if [ "$BACKEND_API_FILES" -gt 0 ]; then
        echo "APIÊé•Âè£ÊµãËØï:"
        echo "  üìÅ ÊµãËØïÊñá‰ª∂: $BACKEND_API_FILES (üü¢ÈÄöËøá: $BACKEND_API_FILES_PASSED, üü°Â§±Ë¥•: $BACKEND_API_FILES_FAILED, üî¥Êó†Ê≥ïËøêË°å: $BACKEND_API_FILES_ERROR)"
        echo "  üß™ ÊµãËØïÁî®‰æã: $BACKEND_API_TESTS (ÈÄöËøá: $BACKEND_API_TESTS_PASSED, Â§±Ë¥•: $BACKEND_API_TESTS_FAILED, Ë∑≥Ëøá: $BACKEND_API_TESTS_SKIPPED)"
    fi
    
    if [ "$BACKEND_REALTIME_FILES" -gt 0 ]; then
        echo "ÂÆûÊó∂ÈÄö‰ø°ÊµãËØï:"
        echo "  üìÅ ÊµãËØïÊñá‰ª∂: $BACKEND_REALTIME_FILES (üü¢ÈÄöËøá: $BACKEND_REALTIME_FILES_PASSED, üü°Â§±Ë¥•: $BACKEND_REALTIME_FILES_FAILED, üî¥Êó†Ê≥ïËøêË°å: $BACKEND_REALTIME_FILES_ERROR)"
        echo "  üß™ ÊµãËØïÁî®‰æã: $BACKEND_REALTIME_TESTS (ÈÄöËøá: $BACKEND_REALTIME_TESTS_PASSED, Â§±Ë¥•: $BACKEND_REALTIME_TESTS_FAILED, Ë∑≥Ëøá: $BACKEND_REALTIME_TESTS_SKIPPED)"
    fi
    
    if [ "$BACKEND_MIDDLEWARE_FILES" -gt 0 ]; then
        echo "‰∏≠Èó¥‰ª∂ÊµãËØï:"
        echo "  üìÅ ÊµãËØïÊñá‰ª∂: $BACKEND_MIDDLEWARE_FILES (üü¢ÈÄöËøá: $BACKEND_MIDDLEWARE_FILES_PASSED, üü°Â§±Ë¥•: $BACKEND_MIDDLEWARE_FILES_FAILED, üî¥Êó†Ê≥ïËøêË°å: $BACKEND_MIDDLEWARE_FILES_ERROR)"
        echo "  üß™ ÊµãËØïÁî®‰æã: $BACKEND_MIDDLEWARE_TESTS (ÈÄöËøá: $BACKEND_MIDDLEWARE_TESTS_PASSED, Â§±Ë¥•: $BACKEND_MIDDLEWARE_TESTS_FAILED, Ë∑≥Ëøá: $BACKEND_MIDDLEWARE_TESTS_SKIPPED)"
    fi
    
    if [ "$BACKEND_SERVICES_FILES" -gt 0 ]; then
        echo "ÊúçÂä°Â±ÇÊµãËØï:"
        echo "  üìÅ ÊµãËØïÊñá‰ª∂: $BACKEND_SERVICES_FILES (üü¢ÈÄöËøá: $BACKEND_SERVICES_FILES_PASSED, üü°Â§±Ë¥•: $BACKEND_SERVICES_FILES_FAILED, üî¥Êó†Ê≥ïËøêË°å: $BACKEND_SERVICES_FILES_ERROR)"
        echo "  üß™ ÊµãËØïÁî®‰æã: $BACKEND_SERVICES_TESTS (ÈÄöËøá: $BACKEND_SERVICES_TESTS_PASSED, Â§±Ë¥•: $BACKEND_SERVICES_TESTS_FAILED, Ë∑≥Ëøá: $BACKEND_SERVICES_TESTS_SKIPPED)"
    fi
    
    # È™åËØÅÊï∞Â≠¶‰∏ÄËá¥ÊÄß
    local calculated_files=$((BACKEND_GAME_FILES + BACKEND_API_FILES + BACKEND_REALTIME_FILES + BACKEND_MIDDLEWARE_FILES + BACKEND_SERVICES_FILES))
    local calculated_tests=$((BACKEND_GAME_TESTS + BACKEND_API_TESTS + BACKEND_REALTIME_TESTS + BACKEND_MIDDLEWARE_TESTS + BACKEND_SERVICES_TESTS))
    
    if [ "$calculated_files" -ne "$BACKEND_TOTAL_FILES" ] || [ "$calculated_tests" -ne "$BACKEND_TOTAL_TESTS" ]; then
        echo "‚ö†Ô∏è  ÁªüËÆ°È™åËØÅ:"
        echo "  ËÆ°ÁÆóÂÄº: Êñá‰ª∂ $calculated_files, ÊµãËØï $calculated_tests"
        echo "  ÂÆûÈôÖÂÄº: Êñá‰ª∂ $BACKEND_TOTAL_FILES, ÊµãËØï $BACKEND_TOTAL_TESTS"
    fi
    echo
    
    # ÂâçÁ´ØÁªüËÆ°
    echo -e "${YELLOW}üé® ÂâçÁ´ØÊµãËØïÁªüËÆ°${NC}"
    echo "----------------------------------------"
    if [ "$FRONTEND_TOTAL_FILES" -gt 0 ]; then
        echo "ÊÄª‰ΩìÁªüËÆ°:"
        echo "  üìÅ ÊµãËØïÊñá‰ª∂: $FRONTEND_TOTAL_FILES"
        echo "  üß™ ÊµãËØïÁî®‰æã: $FRONTEND_TOTAL_TESTS (ÈÄöËøá: $FRONTEND_TOTAL_PASSED, Â§±Ë¥•: $FRONTEND_TOTAL_FAILED)"
    fi
    
    if [ "$FRONTEND_COMPONENTS_FILES" -gt 0 ]; then
        echo "ÁªÑ‰ª∂ÊµãËØï:"
        echo "  üìÅ ÊµãËØïÊñá‰ª∂: $FRONTEND_COMPONENTS_FILES (ÈÄöËøá: $FRONTEND_COMPONENTS_PASSED, Â§±Ë¥•: $FRONTEND_COMPONENTS_FAILED)"
        echo "  üß™ ÊµãËØïÁî®‰æã: $FRONTEND_COMPONENTS_TESTS (ÈÄöËøá: $FRONTEND_COMPONENTS_TESTS_PASSED, Â§±Ë¥•: $FRONTEND_COMPONENTS_TESTS_FAILED)"
    fi
    
    if [ "$FRONTEND_PAGES_FILES" -gt 0 ]; then
        echo "È°µÈù¢ÊµãËØï:"
        echo "  üìÅ ÊµãËØïÊñá‰ª∂: $FRONTEND_PAGES_FILES (ÈÄöËøá: $FRONTEND_PAGES_PASSED, Â§±Ë¥•: $FRONTEND_PAGES_FAILED)"
        echo "  üß™ ÊµãËØïÁî®‰æã: $FRONTEND_PAGES_TESTS (ÈÄöËøá: $FRONTEND_PAGES_TESTS_PASSED, Â§±Ë¥•: $FRONTEND_PAGES_TESTS_FAILED)"
    fi
    
    if [ "$FRONTEND_HOOKS_FILES" -gt 0 ]; then
        echo "HookÊµãËØï:"
        echo "  üìÅ ÊµãËØïÊñá‰ª∂: $FRONTEND_HOOKS_FILES (ÈÄöËøá: $FRONTEND_HOOKS_PASSED, Â§±Ë¥•: $FRONTEND_HOOKS_FAILED)"
        echo "  üß™ ÊµãËØïÁî®‰æã: $FRONTEND_HOOKS_TESTS (ÈÄöËøá: $FRONTEND_HOOKS_TESTS_PASSED, Â§±Ë¥•: $FRONTEND_HOOKS_TESTS_FAILED)"
    fi
    
    if [ "$FRONTEND_SERVICES_FILES" -gt 0 ]; then
        echo "ÊúçÂä°ÊµãËØï:"
        echo "  üìÅ ÊµãËØïÊñá‰ª∂: $FRONTEND_SERVICES_FILES (ÈÄöËøá: $FRONTEND_SERVICES_PASSED, Â§±Ë¥•: $FRONTEND_SERVICES_FAILED)"
        echo "  üß™ ÊµãËØïÁî®‰æã: $FRONTEND_SERVICES_TESTS (ÈÄöËøá: $FRONTEND_SERVICES_TESTS_PASSED, Â§±Ë¥•: $FRONTEND_SERVICES_TESTS_FAILED)"
    fi
    echo
    
    # E2EÁªüËÆ°ÔºàÂ¶ÇÊûúÊúâÁöÑËØùÔºâ
    if [ "$E2E_FILES" -gt 0 ]; then
        echo -e "${YELLOW}üé≠ E2EÊµãËØïÁªüËÆ°${NC}"
        echo "----------------------------------------"
        echo "  üìÅ ÊµãËØïÊñá‰ª∂: $E2E_FILES"
        echo "  üß™ ÊµãËØïÁî®‰æã: $E2E_TESTS"
        echo
    fi
}

# ÁîüÊàêÊµãËØïÊä•Âëä
generate_report() {
    echo
    log_info "üìä ÊµãËØïÊâßË°åÂÆåÊàêÔºåÁîüÊàêÊä•Âëä..."
    echo "========================================"
    echo
    
    echo -e "${BLUE}üèÅ ÊµãËØïÁªìÊûúÊ±áÊÄª${NC}"
    echo "========================================"
    echo -e "$TEST_SUMMARY"
    echo
    
    # ÊòæÁ§∫ËØ¶ÁªÜÊ®°ÂùóÁªüËÆ°
    generate_detailed_stats
    
    echo -e "${BLUE}üìà ÊÄª‰ΩìÁªüËÆ°‰ø°ÊÅØ${NC}"
    echo "ÈÄöËøá: $TESTS_PASSED"
    echo "Â§±Ë¥•: $TESTS_FAILED"
    echo "ÊÄªËÆ°: $((TESTS_PASSED + TESTS_FAILED))"
    echo
    
    if [ $TESTS_FAILED -eq 0 ]; then
        log_success "üéâ ÊâÄÊúâÊµãËØïÈÉΩÈÄöËøá‰∫ÜÔºÅ"
        echo
        echo "‚ú® ‰ª£Á†ÅË¥®ÈáèËâØÂ•ΩÔºåÂèØ‰ª•ÂÆâÂÖ®Êèê‰∫§"
    else
        log_warning "‚ö†Ô∏è  Êúâ $TESTS_FAILED ‰∏™ÊµãËØïÂ§±Ë¥•"
        echo
        echo "üìù ËØ∑Êü•Áúã‰ª•‰∏ãÊó•ÂøóÊñá‰ª∂Ôºö"
        echo "  - üìÅ Êó•ÂøóÁõÆÂΩï: $CURRENT_LOG_DIR"
        echo "  - üîó ÊúÄÊñ∞Êó•Âøó: $LOG_DIR/latest -> $TIMESTAMP"
        echo "  - üìÑ ÂèØÊü•ÁúãÂÖ∑‰ΩìÁöÑ *.log Êñá‰ª∂‰∫ÜËß£ËØ¶ÁªÜÈîôËØØ‰ø°ÊÅØ"
        echo
        echo "üîß ‰øÆÂ§çÂª∫ËÆÆÔºö"
        echo "  1. Êü•ÁúãÂÖ∑‰ΩìÁöÑÊó•ÂøóÊñá‰ª∂‰∫ÜËß£ÈîôËØØËØ¶ÊÉÖ"
        echo "  2. ËøêË°å ./test-all.sh check Ê£ÄÊü•ÁéØÂ¢É"
        echo "  3. ‰ΩøÁî® ./test-all.sh quick ËøõË°åÂø´ÈÄüË∞ÉËØï"
        echo "  4. ÂçïÁã¨ËøêË°åÂ§±Ë¥•ÁöÑÊµãËØïÊ®°ÂùóËøõË°åË∞ÉËØï"
        echo "  5. ÂèÇËÄÉ TEST_STANDARDS.md ‰∫ÜËß£ÊµãËØïËßÑËåÉ"
    fi
    
    # ‰øùÂ≠òÊä•ÂëäÂà∞Êó•ÂøóÁõÆÂΩï
    local report_file="$CURRENT_LOG_DIR/test_report.md"
    cat > "$report_file" << EOF
# Texas Poker ÊµãËØïÊâßË°åÊä•Âëä v2.4

**ÊâßË°åÊó∂Èó¥**: $(date)  
**Êó•ÂøóÁõÆÂΩï**: $CURRENT_LOG_DIR  
**ÊµãËØïÊû∂ÊûÑ**: Âü∫‰∫éÊñ∞ÁöÑÊµãËØïÁõÆÂΩïÁªìÊûÑ api/game/middleware/realtime/services/shared/legacy  
**ËßÑËåÉÊñáÊ°£**: BACKEND_TESTING_GUIDE.md

## ÊµãËØïÁªìÊûúÊ±áÊÄª

$TEST_SUMMARY

## ËØ¶ÁªÜÊ®°ÂùóÊµãËØïÁªüËÆ°

### üîß ÂêéÁ´ØÊµãËØïÁªüËÆ°

$(if [ "$BACKEND_TOTAL_FILES" -gt 0 ]; then
echo "**ÊÄª‰ΩìÁªüËÆ°:**
- üìÅ ÊµãËØïÊñá‰ª∂: $BACKEND_TOTAL_FILES (üü¢ÈÄöËøá: $BACKEND_TOTAL_FILES_PASSED, üü°Â§±Ë¥•: $BACKEND_TOTAL_FILES_FAILED, üî¥Êó†Ê≥ïËøêË°å: $BACKEND_TOTAL_FILES_ERROR)
- üß™ ÊµãËØïÁî®‰æã: $BACKEND_TOTAL_TESTS (ÈÄöËøá: $BACKEND_TOTAL_PASSED, Â§±Ë¥•: $BACKEND_TOTAL_FAILED, Ë∑≥Ëøá: $BACKEND_TOTAL_SKIPPED)"
fi)

$(if [ "$BACKEND_GAME_FILES" -gt 0 ]; then
echo "**Ê∏∏ÊàèÂºïÊìéÊµãËØï:**
- üìÅ ÊµãËØïÊñá‰ª∂: $BACKEND_GAME_FILES (üü¢ÈÄöËøá: $BACKEND_GAME_FILES_PASSED, üü°Â§±Ë¥•: $BACKEND_GAME_FILES_FAILED, üî¥Êó†Ê≥ïËøêË°å: $BACKEND_GAME_FILES_ERROR)
- üß™ ÊµãËØïÁî®‰æã: $BACKEND_GAME_TESTS (ÈÄöËøá: $BACKEND_GAME_TESTS_PASSED, Â§±Ë¥•: $BACKEND_GAME_TESTS_FAILED, Ë∑≥Ëøá: $BACKEND_GAME_TESTS_SKIPPED)"
fi)

$(if [ "$BACKEND_API_FILES" -gt 0 ]; then
echo "**APIÊé•Âè£ÊµãËØï:**
- üìÅ ÊµãËØïÊñá‰ª∂: $BACKEND_API_FILES (üü¢ÈÄöËøá: $BACKEND_API_FILES_PASSED, üü°Â§±Ë¥•: $BACKEND_API_FILES_FAILED, üî¥Êó†Ê≥ïËøêË°å: $BACKEND_API_FILES_ERROR)
- üß™ ÊµãËØïÁî®‰æã: $BACKEND_API_TESTS (ÈÄöËøá: $BACKEND_API_TESTS_PASSED, Â§±Ë¥•: $BACKEND_API_TESTS_FAILED, Ë∑≥Ëøá: $BACKEND_API_TESTS_SKIPPED)"
fi)

$(if [ "$BACKEND_REALTIME_FILES" -gt 0 ]; then
echo "**ÂÆûÊó∂ÈÄö‰ø°ÊµãËØï:**
- üìÅ ÊµãËØïÊñá‰ª∂: $BACKEND_REALTIME_FILES (üü¢ÈÄöËøá: $BACKEND_REALTIME_FILES_PASSED, üü°Â§±Ë¥•: $BACKEND_REALTIME_FILES_FAILED, üî¥Êó†Ê≥ïËøêË°å: $BACKEND_REALTIME_FILES_ERROR)
- üß™ ÊµãËØïÁî®‰æã: $BACKEND_REALTIME_TESTS (ÈÄöËøá: $BACKEND_REALTIME_TESTS_PASSED, Â§±Ë¥•: $BACKEND_REALTIME_TESTS_FAILED, Ë∑≥Ëøá: $BACKEND_REALTIME_TESTS_SKIPPED)"
fi)

$(if [ "$BACKEND_MIDDLEWARE_FILES" -gt 0 ]; then
echo "**‰∏≠Èó¥‰ª∂ÊµãËØï:**
- üìÅ ÊµãËØïÊñá‰ª∂: $BACKEND_MIDDLEWARE_FILES (üü¢ÈÄöËøá: $BACKEND_MIDDLEWARE_FILES_PASSED, üü°Â§±Ë¥•: $BACKEND_MIDDLEWARE_FILES_FAILED, üî¥Êó†Ê≥ïËøêË°å: $BACKEND_MIDDLEWARE_FILES_ERROR)
- üß™ ÊµãËØïÁî®‰æã: $BACKEND_MIDDLEWARE_TESTS (ÈÄöËøá: $BACKEND_MIDDLEWARE_TESTS_PASSED, Â§±Ë¥•: $BACKEND_MIDDLEWARE_TESTS_FAILED, Ë∑≥Ëøá: $BACKEND_MIDDLEWARE_TESTS_SKIPPED)"
fi)

$(if [ "$BACKEND_SERVICES_FILES" -gt 0 ]; then
echo "**ÊúçÂä°Â±ÇÊµãËØï:**
- üìÅ ÊµãËØïÊñá‰ª∂: $BACKEND_SERVICES_FILES (üü¢ÈÄöËøá: $BACKEND_SERVICES_FILES_PASSED, üü°Â§±Ë¥•: $BACKEND_SERVICES_FILES_FAILED, üî¥Êó†Ê≥ïËøêË°å: $BACKEND_SERVICES_FILES_ERROR)
- üß™ ÊµãËØïÁî®‰æã: $BACKEND_SERVICES_TESTS (ÈÄöËøá: $BACKEND_SERVICES_TESTS_PASSED, Â§±Ë¥•: $BACKEND_SERVICES_TESTS_FAILED, Ë∑≥Ëøá: $BACKEND_SERVICES_TESTS_SKIPPED)"
fi)

### üé® ÂâçÁ´ØÊµãËØïÁªüËÆ°

$(if [ "$FRONTEND_TOTAL_FILES" -gt 0 ]; then
echo "**ÊÄª‰ΩìÁªüËÆ°:**
- üìÅ ÊµãËØïÊñá‰ª∂: $FRONTEND_TOTAL_FILES
- üß™ ÊµãËØïÁî®‰æã: $FRONTEND_TOTAL_TESTS (ÈÄöËøá: $FRONTEND_TOTAL_PASSED, Â§±Ë¥•: $FRONTEND_TOTAL_FAILED)"
fi)

$(if [ "$FRONTEND_COMPONENTS_FILES" -gt 0 ]; then
echo "**ÁªÑ‰ª∂ÊµãËØï:**
- üìÅ ÊµãËØïÊñá‰ª∂: $FRONTEND_COMPONENTS_FILES (ÈÄöËøá: $FRONTEND_COMPONENTS_PASSED, Â§±Ë¥•: $FRONTEND_COMPONENTS_FAILED)
- üß™ ÊµãËØïÁî®‰æã: $FRONTEND_COMPONENTS_TESTS (ÈÄöËøá: $FRONTEND_COMPONENTS_TESTS_PASSED, Â§±Ë¥•: $FRONTEND_COMPONENTS_TESTS_FAILED)"
fi)

$(if [ "$FRONTEND_PAGES_FILES" -gt 0 ]; then
echo "**È°µÈù¢ÊµãËØï:**
- üìÅ ÊµãËØïÊñá‰ª∂: $FRONTEND_PAGES_FILES (ÈÄöËøá: $FRONTEND_PAGES_PASSED, Â§±Ë¥•: $FRONTEND_PAGES_FAILED)
- üß™ ÊµãËØïÁî®‰æã: $FRONTEND_PAGES_TESTS (ÈÄöËøá: $FRONTEND_PAGES_TESTS_PASSED, Â§±Ë¥•: $FRONTEND_PAGES_TESTS_FAILED)"
fi)

$(if [ "$FRONTEND_HOOKS_FILES" -gt 0 ]; then
echo "**HookÊµãËØï:**
- üìÅ ÊµãËØïÊñá‰ª∂: $FRONTEND_HOOKS_FILES (ÈÄöËøá: $FRONTEND_HOOKS_PASSED, Â§±Ë¥•: $FRONTEND_HOOKS_FAILED)
- üß™ ÊµãËØïÁî®‰æã: $FRONTEND_HOOKS_TESTS (ÈÄöËøá: $FRONTEND_HOOKS_TESTS_PASSED, Â§±Ë¥•: $FRONTEND_HOOKS_TESTS_FAILED)"
fi)

$(if [ "$FRONTEND_SERVICES_FILES" -gt 0 ]; then
echo "**ÊúçÂä°ÊµãËØï:**
- üìÅ ÊµãËØïÊñá‰ª∂: $FRONTEND_SERVICES_FILES (ÈÄöËøá: $FRONTEND_SERVICES_PASSED, Â§±Ë¥•: $FRONTEND_SERVICES_FAILED)
- üß™ ÊµãËØïÁî®‰æã: $FRONTEND_SERVICES_TESTS (ÈÄöËøá: $FRONTEND_SERVICES_TESTS_PASSED, Â§±Ë¥•: $FRONTEND_SERVICES_TESTS_FAILED)"
fi)

$(if [ "$E2E_FILES" -gt 0 ]; then
echo "### üé≠ E2EÊµãËØïÁªüËÆ°
- üìÅ ÊµãËØïÊñá‰ª∂: $E2E_FILES
- üß™ ÊµãËØïÁî®‰æã: $E2E_TESTS"
fi)

## ÊÄª‰ΩìÁªüËÆ°‰ø°ÊÅØ
- ‚úÖ ÈÄöËøá: $TESTS_PASSED
- ‚ùå Â§±Ë¥•: $TESTS_FAILED  
- üìä ÊÄªËÆ°: $((TESTS_PASSED + TESTS_FAILED))
- üìà ÈÄöËøáÁéá: $(( TESTS_PASSED * 100 / (TESTS_PASSED + TESTS_FAILED) ))%

## ÊµãËØïÊû∂ÊûÑ
- üîß ÂêéÁ´Ø: \`__tests__/{api,game,middleware,realtime,services,shared,legacy}\` + Jest
- üé® ÂâçÁ´Ø: \`__tests__/{components,pages,hooks,services}\` + Vitest + React Testing Library  
- üé≠ E2E: \`e2e-tests/\` + Playwright

## ÂèØÁî®ÂëΩ‰ª§
\`\`\`bash
./test-all.sh           # ËøêË°åÊâÄÊúâÊµãËØï
./test-all.sh quick     # Âø´ÈÄüÊµãËØïÔºàÂºÄÂèëÁî®Ôºâ
./test-all.sh coverage  # ÁîüÊàêË¶ÜÁõñÁéáÊä•Âëä
./test-all.sh backend   # Âè™ËøêË°åÂêéÁ´ØÊµãËØï
./test-all.sh frontend  # Âè™ËøêË°åÂâçÁ´ØÊµãËØï
\`\`\`

## Êó•ÂøóÊñá‰ª∂ÁªìÊûÑ
\`\`\`
$CURRENT_LOG_DIR/
‚îú‚îÄ‚îÄ backend_all_tests.log      # ÂêéÁ´ØÊâÄÊúâÊµãËØï
‚îú‚îÄ‚îÄ backend_game_tests.log     # ÂêéÁ´ØÊ∏∏ÊàèÂºïÊìéÊµãËØï
‚îú‚îÄ‚îÄ backend_api_tests.log      # ÂêéÁ´ØAPIÊé•Âè£ÊµãËØï
‚îú‚îÄ‚îÄ backend_realtime_tests.log # ÂêéÁ´ØÂÆûÊó∂ÈÄö‰ø°ÊµãËØï
‚îú‚îÄ‚îÄ backend_storage_tests.log  # ÂêéÁ´ØÊï∞ÊçÆÂ≠òÂÇ®ÊµãËØï
‚îú‚îÄ‚îÄ backend_coverage.log       # ÂêéÁ´ØË¶ÜÁõñÁéá
‚îú‚îÄ‚îÄ frontend_components.log    # ÂâçÁ´ØÁªÑ‰ª∂ÊµãËØï
‚îú‚îÄ‚îÄ frontend_pages.log         # ÂâçÁ´ØÈ°µÈù¢ÊµãËØï
‚îú‚îÄ‚îÄ frontend_hooks.log         # ÂâçÁ´ØHookÊµãËØï
‚îú‚îÄ‚îÄ frontend_services.log      # ÂâçÁ´ØÊúçÂä°ÊµãËØï
‚îú‚îÄ‚îÄ frontend_coverage.log      # ÂâçÁ´ØË¶ÜÁõñÁéá
‚îú‚îÄ‚îÄ e2e_tests.log              # E2EÊµãËØï
‚îú‚îÄ‚îÄ backend_build.log          # ÂêéÁ´ØÊûÑÂª∫
‚îú‚îÄ‚îÄ frontend_build.log         # ÂâçÁ´ØÊûÑÂª∫
‚îî‚îÄ‚îÄ test_report.md             # ÊµãËØïÊä•Âëä
\`\`\`

## ÂèÇËÄÉÊñáÊ°£
- [TEST_STANDARDS.md](../TEST_STANDARDS.md) - ÊµãËØïÁºñÂÜôËßÑËåÉ
- [DEV_GUIDE.md](../DEV_GUIDE.md) - ÂºÄÂèëÊåáÂçó

EOF

    # ÂêåÊó∂Âú®Ê†πÁõÆÂΩïÂàõÂª∫‰∏Ä‰∏™ÁÆÄÂåñÁöÑÊä•ÂëäÈìæÊé•
    cat > test_report.md << EOF
# Texas Poker ÊúÄÊñ∞ÊµãËØïÊä•Âëä

**ÊúÄÂêéÊâßË°åÊó∂Èó¥**: $(date)  
**ËØ¶ÁªÜÊä•Âëä**: [\`$CURRENT_LOG_DIR/test_report.md\`](./$CURRENT_LOG_DIR/test_report.md)  
**Êó•ÂøóÁõÆÂΩï**: [\`$CURRENT_LOG_DIR\`](./$CURRENT_LOG_DIR/)

## Âø´ÈÄüÊü•Áúã
- üìä ÈÄöËøá: $TESTS_PASSED | Â§±Ë¥•: $TESTS_FAILED | ÊÄªËÆ°: $((TESTS_PASSED + TESTS_FAILED))
- üìà ÈÄöËøáÁéá: $(( TESTS_PASSED * 100 / (TESTS_PASSED + TESTS_FAILED) ))%

## Êó•ÂøóÁÆ°ÁêÜ
- üîó ÊúÄÊñ∞Êó•Âøó: [\`$LOG_DIR/latest\`](./$LOG_DIR/latest) -> $TIMESTAMP
- üìÅ ÊâÄÊúâÂéÜÂè≤Êó•Âøó: [\`$LOG_DIR/\`](./$LOG_DIR/)

Êü•ÁúãËØ¶ÁªÜÊó•ÂøóÂíåÂÆåÊï¥Êä•ÂëäËØ∑ËÆøÈóÆ‰∏äËø∞ÈìæÊé•„ÄÇ
EOF

    log_info "üìÑ ËØ¶ÁªÜÊä•ÂëäÂ∑≤‰øùÂ≠òÂà∞ $report_file"
    log_info "üìÑ ÁÆÄÂåñÊä•ÂëäÂ∑≤‰øùÂ≠òÂà∞ test_report.md"
}

# ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ
show_help() {
    echo "Texas Poker ÊµãËØïÊâßË°åËÑöÊú¨"
    echo
    echo "Áî®Ê≥ï: $0 [ÈÄâÈ°π]"
    echo
    echo "ÈÄâÈ°π:"
    echo "  all          ËøêË°åÊâÄÊúâÊµãËØïÔºàÈªòËÆ§Ôºâ"
    echo "  backend      Âè™ËøêË°åÂêéÁ´ØÊµãËØï"
    echo "  frontend     Âè™ËøêË°åÂâçÁ´ØÊµãËØï"
    echo "  e2e          Âè™ËøêË°åE2EÊµãËØï"
    echo "  build        Âè™ËøêË°åÊûÑÂª∫ÊµãËØï"
    echo "  new          Âè™ËøêË°åÊñ∞Â¢ûÂäüËÉΩÊµãËØï"
    echo "  check        Âè™Ê£ÄÊü•ÁéØÂ¢É"
    echo "  coverage     ÁîüÊàêÊµãËØïË¶ÜÁõñÁéáÊä•Âëä"
    echo "  quick        Âø´ÈÄüÊµãËØïÔºàË∑≥ËøáE2EÂíåÊûÑÂª∫Ôºâ"
    echo "  help         ÊòæÁ§∫Ê≠§Â∏ÆÂä©‰ø°ÊÅØ"
    echo "  logs         Êü•ÁúãÊúÄÊñ∞ÊµãËØïÊó•Âøó"
    echo "  clean        Ê∏ÖÁêÜÊ†πÁõÆÂΩï‰∏ãÁöÑÊóßÊó•ÂøóÊñá‰ª∂"
    echo
    echo "Á§∫‰æã:"
    echo "  $0           # ËøêË°åÊâÄÊúâÊµãËØï"
    echo "  $0 backend   # Âè™ËøêË°åÂêéÁ´ØÊµãËØï"
    echo "  $0 frontend  # Âè™ËøêË°åÂâçÁ´ØÊµãËØï"
    echo "  $0 quick     # Âø´ÈÄüÊµãËØïÔºàÂºÄÂèëÊó∂‰ΩøÁî®Ôºâ"
    echo "  $0 coverage  # ÁîüÊàêË¶ÜÁõñÁéáÊä•Âëä"
    echo "  $0 new       # Âè™ÊµãËØïÊñ∞Â¢ûÂäüËÉΩ"
    echo "  $0 logs      # Êü•ÁúãÊúÄÊñ∞ÊµãËØïÊó•Âøó"
    echo "  $0 clean     # Ê∏ÖÁêÜÊ†πÁõÆÂΩïÊóßÊó•ÂøóÊñá‰ª∂"
    echo
    echo "üìÅ Êó•ÂøóÁÆ°ÁêÜ:"
    echo "  - Êó•ÂøóÂ≠òÂÇ®Âú® test-logs/ ÁõÆÂΩï‰∏ã"
    echo "  - ÊØèÊ¨°ÊâßË°åÂàõÂª∫Êó∂Èó¥Êà≥ÁõÆÂΩï"
    echo "  - test-logs/latest ÊåáÂêëÊúÄÊñ∞Êó•Âøó"
    echo "  - Ëá™Âä®‰øùÁïôÊúÄËøë5Ê¨°ÊµãËØïÊó•Âøó"
}

# Âè™ËøêË°åÊñ∞Â¢ûÂäüËÉΩÊµãËØï
run_new_features_only() {
    log_info "üÜï ËøêË°åÊñ∞Â¢ûÂäüËÉΩÊµãËØï..."
    
    # Ê£ÄÊü•ÂêéÁ´ØÊñ∞Â¢ûÂäüËÉΩ
    log_info "Ê£ÄÊü•ÂêéÁ´ØÊñ∞Â¢ûÂäüËÉΩ..."
    cd backend
    local backend_new_log="$CURRENT_LOG_DIR/backend_new_features.log"
    if npm test -- --testPathPattern="systemHandlers.enhanced.test.ts" > "../$backend_new_log" 2>&1; then
        record_test_result "Backend New Features" "pass"
    else
        record_test_result "Backend New Features" "fail" "$backend_new_log"
    fi
    cd ..
    
    # Ê£ÄÊü•ÂâçÁ´ØÊñ∞Â¢ûÁªÑ‰ª∂
    log_info "Ê£ÄÊü•ÂâçÁ´ØÊñ∞Â¢ûÁªÑ‰ª∂..."
    cd frontend
    
    # ÊµãËØïÊñ∞Â¢ûÁöÑÁªÑ‰ª∂
    for component in "RoomSwitchConfirmModal" "UserCurrentRoomStatus" "ReconnectionIndicator"; do
        log_info "ÊµãËØïÁªÑ‰ª∂: $component"
        local component_log="$CURRENT_LOG_DIR/frontend_${component,,}.log"
        if npm test -- ${component}.test.tsx --run > "../$component_log" 2>&1; then
            record_test_result "$component" "pass"
        else
            record_test_result "$component" "fail" "$component_log"
        fi
    done
    
    # ÊµãËØïÂ¢ûÂº∫ÁöÑÊúçÂä°
    log_info "ÊµãËØïÂ¢ûÂº∫ÁöÑÊúçÂä°..."
    local socketservice_log="$CURRENT_LOG_DIR/frontend_socketservice_enhanced.log"
    if npm test -- socketService.enhanced.test.ts --run > "../$socketservice_log" 2>&1; then
        record_test_result "SocketService Enhanced" "pass"
    else
        record_test_result "SocketService Enhanced" "fail" "$socketservice_log"
    fi
    
    cd ..
}

# Âè™ËøêË°åË¶ÜÁõñÁéáÊµãËØï
run_coverage_only() {
    log_info "üìä ÁîüÊàêÊµãËØïË¶ÜÁõñÁéáÊä•Âëä..."
    
    # ÂêéÁ´ØË¶ÜÁõñÁéá
    cd backend
    log_info "ÁîüÊàêÂêéÁ´ØË¶ÜÁõñÁéáÊä•Âëä..."
    local backend_coverage_full_log="$CURRENT_LOG_DIR/backend_coverage_full.log"
    if npm run test:coverage > "../$backend_coverage_full_log" 2>&1; then
        record_test_result "Backend Coverage" "pass"
    else
        record_test_result "Backend Coverage" "fail" "$backend_coverage_full_log"
    fi
    cd ..
    
    # ÂâçÁ´ØË¶ÜÁõñÁéá
    cd frontend  
    log_info "ÁîüÊàêÂâçÁ´ØË¶ÜÁõñÁéáÊä•Âëä..."
    local frontend_coverage_full_log="$CURRENT_LOG_DIR/frontend_coverage_full.log"
    if npm run test:run -- --coverage > "../$frontend_coverage_full_log" 2>&1; then
        record_test_result "Frontend Coverage" "pass"
    else
        record_test_result "Frontend Coverage" "fail" "$frontend_coverage_full_log"
    fi
    cd ..
}

# Âø´ÈÄüÊµãËØïÔºàÂºÄÂèëÊó∂‰ΩøÁî®Ôºâ
run_quick_tests() {
    log_info "‚ö° ËøêË°åÂø´ÈÄüÊµãËØïÂ•ó‰ª∂..."
    
    # Âè™ËøêË°åÊ∏∏ÊàèÂºïÊìéÊµãËØïÔºåË∑≥ËøáÂ§çÊùÇÁöÑÈõÜÊàêÊµãËØïÂíåE2E
    cd backend
    log_info "ÂêéÁ´ØÊ†∏ÂøÉÊµãËØïÔºàÊ∏∏ÊàèÂºïÊìéÔºâ..."
    local backend_quick_log="$CURRENT_LOG_DIR/backend_quick.log"
    if npm test -- --testPathPattern="__tests__/game" > "../$backend_quick_log" 2>&1; then
        record_test_result "Backend Quick Tests" "pass"
    else
        record_test_result "Backend Quick Tests" "fail" "$backend_quick_log"
    fi
    cd ..
    
    cd frontend
    log_info "ÂâçÁ´ØÁªÑ‰ª∂ÂíåHookÊµãËØï..."
    local frontend_quick_log="$CURRENT_LOG_DIR/frontend_quick.log"
    if npm test -- __tests__/components __tests__/hooks --run > "../$frontend_quick_log" 2>&1; then
        record_test_result "Frontend Quick Tests" "pass"
    else
        record_test_result "Frontend Quick Tests" "fail" "$frontend_quick_log"
    fi
    cd ..
}

# Êü•ÁúãÊúÄÊñ∞ÊµãËØïÊó•Âøó
show_logs() {
    log_info "üìÅ Êü•ÁúãÊúÄÊñ∞ÊµãËØïÊó•Âøó..."
    
    if [ -L "$LOG_DIR/latest" ]; then
        local latest_dir=$(readlink "$LOG_DIR/latest")
        local latest_path="$LOG_DIR/$latest_dir"
        
        log_info "ÊúÄÊñ∞Êó•ÂøóÁõÆÂΩï: $latest_path"
        echo
        
        if [ -d "$latest_path" ]; then
            echo -e "${BLUE}üìã ÂèØÁî®Êó•ÂøóÊñá‰ª∂:${NC}"
            ls -la "$latest_path" | grep "\.log$" | while read -r line; do
                local file=$(echo "$line" | awk '{print $9}')
                local size=$(echo "$line" | awk '{print $5}')
                echo "  üìÑ $file (Â§ßÂ∞è: $size bytes)"
            done
            
            echo
            echo -e "${BLUE}üîó Âø´ÈÄüËÆøÈóÆ:${NC}"
            echo "  Êü•ÁúãËØ¶ÁªÜÊä•Âëä: cat $latest_path/test_report.md"
            echo "  Êü•ÁúãÊâÄÊúâÊó•Âøó: ls -la $latest_path/"
            echo "  Êü•ÁúãÁâπÂÆöÊó•Âøó: cat $latest_path/<Êñá‰ª∂Âêç>.log"
            
            if [ -f "$latest_path/test_report.md" ]; then
                echo
                echo -e "${BLUE}üìä ÊúÄÊñ∞ÊµãËØïÊä•ÂëäÊëòË¶Å:${NC}"
                echo "----------------------------------------"
                head -20 "$latest_path/test_report.md"
                echo "----------------------------------------"
                echo "ÂÆåÊï¥Êä•Âëä: cat $latest_path/test_report.md"
            fi
        else
            log_error "ÊúÄÊñ∞Êó•ÂøóÁõÆÂΩï‰∏çÂ≠òÂú®: $latest_path"
        fi
    else
        log_warning "Ê≤°ÊúâÊâæÂà∞ÊúÄÊñ∞ÁöÑÊµãËØïÊó•Âøó"
        if [ -d "$LOG_DIR" ]; then
            echo "ÂèØÁî®ÁöÑÂéÜÂè≤Êó•Âøó:"
            ls -1t "$LOG_DIR" | grep -E "^[0-9]{8}_[0-9]{6}$" | head -5
        fi
    fi
}

# Ê∏ÖÁêÜÊ†πÁõÆÂΩïÊóßÊó•ÂøóÊñá‰ª∂
clean_root_logs() {
    log_info "üßπ Ê∏ÖÁêÜÊ†πÁõÆÂΩï‰∏ãÁöÑÊóßÊó•ÂøóÊñá‰ª∂..."
    
    # Êü•ÊâæÊ†πÁõÆÂΩï‰∏≠ÁöÑ.logÊñá‰ª∂
    local log_files=$(ls -1 *.log 2>/dev/null || true)
    
    if [ -n "$log_files" ]; then
        echo -e "${YELLOW}ÂèëÁé∞‰ª•‰∏ãÊóßÊó•ÂøóÊñá‰ª∂:${NC}"
        ls -la *.log
        echo
        
        read -p "Á°ÆËÆ§Âà†Èô§Ëøô‰∫õÊñá‰ª∂Âêó? (y/N): " confirm
        if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
            rm -f *.log
            log_success "Â∑≤Ê∏ÖÁêÜÊ†πÁõÆÂΩï‰∏ãÁöÑÊóßÊó•ÂøóÊñá‰ª∂"
        else
            log_info "Â∑≤ÂèñÊ∂àÊ∏ÖÁêÜÊìç‰Ωú"
        fi
    else
        log_success "Ê†πÁõÆÂΩïÂæàÂπ≤ÂáÄÔºåÊ≤°ÊúâÊâæÂà∞ÊóßÁöÑ.logÊñá‰ª∂"
    fi
    
    echo
    log_info "üí° ÊèêÁ§∫ÔºöÊñ∞ÁöÑÊµãËØïÊó•ÂøóÁé∞Âú®Áªü‰∏ÄÂ≠òÂÇ®Âú® test-logs/ ÁõÆÂΩï‰∏ã"
}

# ‰∏ªÂáΩÊï∞
main() {
    echo -e "${BLUE}üß™ Texas Poker Áªü‰∏ÄÊµãËØïÊâßË°åËÑöÊú¨ v2.3${NC}"
    echo -e "${BLUE}Âü∫‰∫éÈáçÊûÑÂêéÁöÑÂäüËÉΩÂüüÊµãËØïÊû∂ÊûÑÂíåTEST_STANDARDS.mdËßÑËåÉ${NC}"
    echo "========================================"
    echo
    
    # ËÆæÁΩÆÊó•ÂøóÁõÆÂΩïÔºàÈô§‰∫Ühelp„ÄÅlogsÂíåcleanÂëΩ‰ª§Ôºâ
    if [ "${1:-all}" != "help" ] && [ "${1:-all}" != "--help" ] && [ "${1:-all}" != "-h" ] && [ "${1:-all}" != "logs" ] && [ "${1:-all}" != "clean" ]; then
        setup_logging
        cleanup_old_logs
    fi
    
    case "${1:-all}" in
        all)
            check_environment
            run_backend_tests
            run_frontend_tests
            run_build_tests
            run_e2e_tests
            generate_report
            ;;
        backend)
            check_environment
            run_backend_tests
            generate_report
            ;;
        frontend)
            check_environment
            run_frontend_tests
            generate_report
            ;;
        e2e)
            check_environment
            run_e2e_tests
            generate_report
            ;;
        build)
            run_build_tests
            generate_report
            ;;
        new)
            check_environment
            run_new_features_only
            generate_report
            ;;
        coverage)
            check_environment
            run_coverage_only
            generate_report
            ;;
        quick)
            run_quick_tests
            generate_report
            ;;
        check)
            check_environment
            ;;
        logs)
            show_logs
            ;;
        clean)
            clean_root_logs
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            log_error "Êú™Áü•ÈÄâÈ°π: $1"
            show_help
            exit 1
            ;;
    esac
}

# ÊâßË°å‰∏ªÂáΩÊï∞
main "$@"